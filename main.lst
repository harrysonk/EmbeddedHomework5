


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ************
    2 00000000         ; main.s
    3 00000000         ; Author:
    4 00000000         ; Date Created:
    5 00000000         ; Last Modified:
    6 00000000         ; Section Number:
    7 00000000         ; Instructor: 
    8 00000000         ; Homework Number: 5
    9 00000000         ;   Brief description of the program
   10 00000000         ;
   11 00000000         ;*******************************************************
                       ************
   12 00000000         
   13 00000000         
   14 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   15 00000000                 THUMB
   16 00000000                 EXPORT           Start
   17 00000000         Start
   18 00000000         
   19 00000000         main
   20 00000000 F000 F80A       BL               Question1
   21 00000004 F000 F82B       BL               Question2
   22 00000008 F000 F82A       BL               Question3
   23 0000000C F000 F836       BL               Question4
   24 00000010 F000 F855       BL               Question5
   25 00000014 E7FF            B                loop
   26 00000016         loop
   27 00000016         
   28 00000016 E7FE            B                loop
   29 00000018         
   30 00000018         
   31 00000018         Question1
   32 00000018 F244 5167       MOV              R1, #0x4567
   33 0000001C F2C0 1123       MOVT             R1, #0x0123
   34 00000020 F04F 08FF       MOV              R8, #0x00FF
   35 00000024 F6CF 78FF       MOVT             R8, #0xFFFF ;Setting up r8 to h
                                                            ave bit-clear value
                                                             of 0x0000FF00
   36 00000028 F64F 79FF       MOV              R9, #0xFFFF
   37 0000002C F6CF 7900       MOVT             R9, #0xFF00 ;Setting up r9 to h
                                                            ave bit-clear value
                                                             of 0x00FF0000
   38 00000030 F04F 0200       MOV              R2, #0x0000
   39 00000034 F2C0 0200       MOVT             R2, #0x0000 ;r2 should be 0x000
                                                            00000
   40 00000038 EA4F 6201       LSL              R2, R1, #24 ; Isolate last byte
                                                             to put at beginnin
                                                            g of r2, r2 is 0x67
                                                            000000
   41 0000003C EA4F 6311       LSR              r3, R1, #24 ; Isolate first byt
                                                            e to put at end of 
                                                            r2
   42 00000040 EA43 0202       ORR              R2, R3, R2  ; r2 now has first 
                                                            and last byte corre
                                                            ct, r2 is now 0x670
                                                            00001
   43 00000044 EA21 0408       BIC              R4, R1, R8  ; Clear bits to iso



ARM Macro Assembler    Page 2 


                                                            late second set of 
                                                            middle bits, r4 is 
                                                            0x00004500
   44 00000048 EA4F 2504       LSL              R5, R4, #8  ; r5 is now 0x00450
                                                            000
   45 0000004C EA42 0205       ORR              R2, R2, R5  ; r2 is now 0x67450
                                                            001
   46 00000050 EA21 0609       BIC              R6, R1, R9  ; Clear bits to iso
                                                            late first set of m
                                                            iddle bits, r6 is 0
                                                            x00230000
   47 00000054 EA4F 2716       LSR              R7, R6, #8  ; r6 is now 0x00002
                                                            300
   48 00000058 EA47 0202       ORR              R2, R7, R2  ; r2 is now finally
                                                             correct being 0x67
                                                            452301
   49 0000005C 4770            BX               LR
   50 0000005E         
   51 0000005E         Question2
   52 0000005E 4770            BX               LR
   53 00000060         
   54 00000060         Question3
   55 00000060         ;Assume x is stored in r0 and result is stored in r1
   56 00000060 F06F 004E       MOV              R0, #-79    ;this is setting wh
                                                            atever you want x t
                                                            o be
   57 00000064 B120            CBZ              R0, zero    ;Branch if 0
   58 00000066 2800            CMP              R0, #0      ;Compare with 0
   59 00000068 DB05            BLT              negativeOne ;Branch less than 0
                                                            
   60 0000006A F04F 0101       MOV              R1, #1      ; If not 0 and not 
                                                            less than 0, set r1
                                                             (output) to 1
   61 0000006E 4770            BX               LR          ;Back to main
   62 00000070         zero
   63 00000070 F04F 0100       MOV              R1, #0      ;If zero set r1 to 
                                                            0
   64 00000074 4770            BX               LR          ;back to main
   65 00000076         negativeOne
   66 00000076 F04F 31FF       MOV              R1, #-1     ;If less than 1 set
                                                             r1 to be -1 (0xfff
                                                            fffff)
   67 0000007A 4770            BX               LR          ;back to main
   68 0000007C         
   69 0000007C         Question4
   70 0000007C         ;Let r0 be a, r1 be b, r2 be c, and r3 store result
   71 0000007C F04F 0004       MOV              R0, #4      ;set r0 to be whate
                                                            ver number
   72 00000080 F04F 0103       MOV              R1, #3      ;set r1 to be whate
                                                            ver number
   73 00000084 F04F 0201       MOV              R2, #1      ;set r2 to be whate
                                                            ver number
   74 00000088 4288            CMP              R0, R1      ; Compare a and b
   75 0000008A DB01            BLT              aLessThanB  ;Branch if a is les
                                                            s than b
   76 0000008C DC05            BGT              aGreaterThanSomething
   77 0000008E 4770            BX               LR
   78 00000090         aLessThanB
   79 00000090 4290            CMP              R0, R2      ;Compare a an c



ARM Macro Assembler    Page 3 


   80 00000092 DB00            BLT              aIsTheMin   ;A is the min so ju
                                                            mp to aIsTheMin
   81 00000094 DC01            BGT              aGreaterThanSomething
   82 00000096         aIsTheMin
   83 00000096 4603            MOV              R3, R0
   84 00000098 4770            BX               LR
   85 0000009A         aGreaterThanSomething
   86 0000009A 4281            CMP              R1, R0      ;Compare b and a
   87 0000009C DB01            BLT              bLessThanA
   88 0000009E DC06            BGT              bGreaterThanSomething
   89 000000A0 4770            BX               LR
   90 000000A2         bLessThanA
   91 000000A2 4291            CMP              R1, R2      ;compare b with c
   92 000000A4 DB01            BLT              bIsTheMin
   93 000000A6 DC02            BGT              bGreaterThanSomething
   94 000000A8 4770            BX               LR
   95 000000AA         bIsTheMin
   96 000000AA 460B            MOV              R3, R1
   97 000000AC 4770            BX               LR
   98 000000AE         bGreaterThanSomething
   99 000000AE 4282            CMP              R2, R0      ;Compare c and a
  100 000000B0 DB00            BLT              cLessThanA  ;Branch if c is les
                                                            s than a
  101 000000B2 4770            BX               LR
  102 000000B4         cLessThanA
  103 000000B4 428A            CMP              R2, R1      ;Compare c and b
  104 000000B6 DB00            BLT              cIsTheMin
  105 000000B8 4770            BX               LR
  106 000000BA         cIsTheMin
  107 000000BA 4613            MOV              R3, R2
  108 000000BC 4770            BX               LR
  109 000000BE         
  110 000000BE         Question5
  111 000000BE         ;Assume r0 is output, r1 and r2 are x and y respectivly
  112 000000BE F04F 0103       MOV              R1, #3      ;Put value x into R
                                                            1
  113 000000C2 F04F 0204       MOV              R2, #4      ;Put value y into r
                                                            2
  114 000000C6 460B            MOV              R3, R1      ;Make copy of value
                                                             that is being mult
                                                            iplied by itself
  115 000000C8 B12A            CBZ              R2, exponentIsZero ;Branch if e
                                                            xponent is 0
  116 000000CA 2A01            CMP              R2, #1      ;Compare exponent t
                                                            o 1
  117 000000CC D006            BEQ              exponentIsOne ;Branch if expone
                                                            nt is one
  118 000000CE F1A2 0201       SUB              R2, R2, #1  ;Minus 1 from expon
                                                            ent before looping 
                                                            and multiplying
  119 000000D2 E005            B                powerLoop   ;PowerLoop for mult
                                                            iplying power
  120 000000D4 4770            BX               LR
  121 000000D6         exponentIsZero
  122 000000D6 F04F 0001       MOV              R0, #1      ;If exponent is 0, 
                                                            1 is output so move
                                                             1 to output
  123 000000DA 4770            BX               LR          ;back to main
  124 000000DC         exponentIsOne



ARM Macro Assembler    Page 4 


  125 000000DC 4608            MOV              R0, R1      ;If exponent is 1, 
                                                            R1 (x) is output so
                                                             move x to output
  126 000000DE 4770            BX               LR          ; Back to main
  127 000000E0         powerLoop
  128 000000E0 FB01 F103       MUL              R1, R1, R3  ;Multiply R1 by ori
                                                            ginal self and stor
                                                            e back into r1
  129 000000E4 1E52            SUBS             R2, R2, #1  ;sub exponent by 1 
                                                            and compare to 1
  130 000000E6 D1FB            BNE              powerLoop   ;If exponent does n
                                                            ot equal 1 then loo
                                                            p again
  131 000000E8 4608            MOV              R0, R1      ; Move R1 which sho
                                                            uld be correct valu
                                                            e into output R0
  132 000000EA 4770            BX               LR          ;Return to main
  133 000000EC         
  134 000000EC                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  135 000000EC                 END                          ; end of file
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IM:\Keil\ARM\RV31\INC -IM:\Keil\ARM\CMSIS\Include -IM:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 14 in file main.s
   Uses
      None
Comment: .text unused
Question1 00000018

Symbol: Question1
   Definitions
      At line 31 in file main.s
   Uses
      At line 20 in file main.s
Comment: Question1 used once
Question2 0000005E

Symbol: Question2
   Definitions
      At line 51 in file main.s
   Uses
      At line 21 in file main.s
Comment: Question2 used once
Question3 00000060

Symbol: Question3
   Definitions
      At line 54 in file main.s
   Uses
      At line 22 in file main.s
Comment: Question3 used once
Question4 0000007C

Symbol: Question4
   Definitions
      At line 69 in file main.s
   Uses
      At line 23 in file main.s
Comment: Question4 used once
Question5 000000BE

Symbol: Question5
   Definitions
      At line 110 in file main.s
   Uses
      At line 24 in file main.s
Comment: Question5 used once
Start 00000000

Symbol: Start
   Definitions
      At line 17 in file main.s
   Uses
      At line 16 in file main.s
Comment: Start used once
aGreaterThanSomething 0000009A

Symbol: aGreaterThanSomething



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 85 in file main.s
   Uses
      At line 76 in file main.s
      At line 81 in file main.s

aIsTheMin 00000096

Symbol: aIsTheMin
   Definitions
      At line 82 in file main.s
   Uses
      At line 80 in file main.s
Comment: aIsTheMin used once
aLessThanB 00000090

Symbol: aLessThanB
   Definitions
      At line 78 in file main.s
   Uses
      At line 75 in file main.s
Comment: aLessThanB used once
bGreaterThanSomething 000000AE

Symbol: bGreaterThanSomething
   Definitions
      At line 98 in file main.s
   Uses
      At line 88 in file main.s
      At line 93 in file main.s

bIsTheMin 000000AA

Symbol: bIsTheMin
   Definitions
      At line 95 in file main.s
   Uses
      At line 92 in file main.s
Comment: bIsTheMin used once
bLessThanA 000000A2

Symbol: bLessThanA
   Definitions
      At line 90 in file main.s
   Uses
      At line 87 in file main.s
Comment: bLessThanA used once
cIsTheMin 000000BA

Symbol: cIsTheMin
   Definitions
      At line 106 in file main.s
   Uses
      At line 104 in file main.s
Comment: cIsTheMin used once
cLessThanA 000000B4

Symbol: cLessThanA
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 102 in file main.s
   Uses
      At line 100 in file main.s
Comment: cLessThanA used once
exponentIsOne 000000DC

Symbol: exponentIsOne
   Definitions
      At line 124 in file main.s
   Uses
      At line 117 in file main.s
Comment: exponentIsOne used once
exponentIsZero 000000D6

Symbol: exponentIsZero
   Definitions
      At line 121 in file main.s
   Uses
      At line 115 in file main.s
Comment: exponentIsZero used once
loop 00000016

Symbol: loop
   Definitions
      At line 26 in file main.s
   Uses
      At line 25 in file main.s
      At line 28 in file main.s

main 00000000

Symbol: main
   Definitions
      At line 19 in file main.s
   Uses
      None
Comment: main unused
negativeOne 00000076

Symbol: negativeOne
   Definitions
      At line 65 in file main.s
   Uses
      At line 59 in file main.s
Comment: negativeOne used once
powerLoop 000000E0

Symbol: powerLoop
   Definitions
      At line 127 in file main.s
   Uses
      At line 119 in file main.s
      At line 130 in file main.s

zero 00000070

Symbol: zero
   Definitions
      At line 62 in file main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 57 in file main.s
Comment: zero used once
22 symbols
353 symbols in table
