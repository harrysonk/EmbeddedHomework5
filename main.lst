


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ************
    2 00000000         ; main.s
    3 00000000         ; Author:
    4 00000000         ; Date Created:
    5 00000000         ; Last Modified:
    6 00000000         ; Section Number:
    7 00000000         ; Instructor: 
    8 00000000         ; Homework Number: 5
    9 00000000         ;   Brief description of the program
   10 00000000         ;
   11 00000000         ;*******************************************************
                       ************
   12 00000000         
   13 00000000                 AREA             myData, DATA, READONLY ;DataAre
                                                            aContains an array 
                                                            of 10 unsigned ints
                                                            
   14 00000000 00000006 
              00000007 
              00000008 
              00000002 
              00000001 
              00000008 
              00000003 
              0000000C 
              0000000B 
              0000000A ARRAY   DCD              6,7,8,2,1,8,3,12,11,10
   15 00000028                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   16 00000000                 THUMB
   17 00000000                 EXPORT           Start
   18 00000000         Start
   19 00000000         
   20 00000000         main
   21 00000000 F000 F80A       BL               Question1
   22 00000004 F000 F82B       BL               Question2
   23 00000008 F000 F839       BL               Question3
   24 0000000C F000 F845       BL               Question4
   25 00000010 F000 F864       BL               Question5
   26 00000014 E7FF            B                loop
   27 00000016         loop
   28 00000016         
   29 00000016 E7FE            B                loop
   30 00000018         
   31 00000018         
   32 00000018         Question1
   33 00000018 F244 5167       MOV              R1, #0x4567
   34 0000001C F2C0 1123       MOVT             R1, #0x0123
   35 00000020 F04F 08FF       MOV              R8, #0x00FF
   36 00000024 F6CF 78FF       MOVT             R8, #0xFFFF ;Setting up r8 to h
                                                            ave bit-clear value
                                                             of 0x0000FF00
   37 00000028 F64F 79FF       MOV              R9, #0xFFFF
   38 0000002C F6CF 7900       MOVT             R9, #0xFF00 ;Setting up r9 to h
                                                            ave bit-clear value
                                                             of 0x00FF0000
   39 00000030 F04F 0200       MOV              R2, #0x0000
   40 00000034 F2C0 0200       MOVT             R2, #0x0000 ;r2 should be 0x000



ARM Macro Assembler    Page 2 


                                                            00000
   41 00000038 EA4F 6201       LSL              R2, R1, #24 ; Isolate last byte
                                                             to put at beginnin
                                                            g of r2, r2 is 0x67
                                                            000000
   42 0000003C EA4F 6311       LSR              r3, R1, #24 ; Isolate first byt
                                                            e to put at end of 
                                                            r2
   43 00000040 EA43 0202       ORR              R2, R3, R2  ; r2 now has first 
                                                            and last byte corre
                                                            ct, r2 is now 0x670
                                                            00001
   44 00000044 EA21 0408       BIC              R4, R1, R8  ; Clear bits to iso
                                                            late second set of 
                                                            middle bits, r4 is 
                                                            0x00004500
   45 00000048 EA4F 2504       LSL              R5, R4, #8  ; r5 is now 0x00450
                                                            000
   46 0000004C EA42 0205       ORR              R2, R2, R5  ; r2 is now 0x67450
                                                            001
   47 00000050 EA21 0609       BIC              R6, R1, R9  ; Clear bits to iso
                                                            late first set of m
                                                            iddle bits, r6 is 0
                                                            x00230000
   48 00000054 EA4F 2716       LSR              R7, R6, #8  ; r6 is now 0x00002
                                                            300
   49 00000058 EA47 0202       ORR              R2, R7, R2  ; r2 is now finally
                                                             correct being 0x67
                                                            452301
   50 0000005C 4770            BX               LR
   51 0000005E         
   52 0000005E         Question2
   53 0000005E         
   54 0000005E 4830            LDR              R0, =ARRAY  ;Load R0 with nums
   55 00000060 F04F 0100       MOV              R1, #0      ;Reset R1 to 0 for 
                                                            calculation
   56 00000064 F04F 0300       MOV              R3, #0      ;Reset R3 to 0 for 
                                                            calculation
   57 00000068         sumOfNumbersLoop
   58 00000068 5842            LDR              R2, [R0, R1] ;Get numbers at it
                                                            erator point
   59 0000006A 4413            ADD              R3, R3, R2  ; Add numbers and s
                                                            tore in R3
   60 0000006C F101 0104       ADD              R1, R1, #4  ; Add offset of 4
   61 00000070 2928            CMP              R1, #40     ; is offset greater
                                                             than40
   62 00000072 D3F9            BLO              sumOfNumbersLoop ;Branch back t
                                                            o Loop
   63 00000074 F04F 010A       MOV              R1, #10     ;Move 10 into r1 to
                                                             divide by
   64 00000078 FBB3 F0F1       UDIV             R0, R3, R1  ;Get average and st
                                                            ore into R0, rounds
                                                             down
   65 0000007C 4770            BX               LR
   66 0000007E         
   67 0000007E         Question3
   68 0000007E         ;Assume x is stored in r0 and result is stored in r1
   69 0000007E F06F 004E       MOV              R0, #-79    ;this is setting wh
                                                            atever you want x t



ARM Macro Assembler    Page 3 


                                                            o be
   70 00000082 B120            CBZ              R0, zero    ;Branch if 0
   71 00000084 2800            CMP              R0, #0      ;Compare with 0
   72 00000086 DB05            BLT              negativeOne ;Branch less than 0
                                                            
   73 00000088 F04F 0101       MOV              R1, #1      ; If not 0 and not 
                                                            less than 0, set r1
                                                             (output) to 1
   74 0000008C 4770            BX               LR          ;Back to main
   75 0000008E         zero
   76 0000008E F04F 0100       MOV              R1, #0      ;If zero set r1 to 
                                                            0
   77 00000092 4770            BX               LR          ;back to main
   78 00000094         negativeOne
   79 00000094 F04F 31FF       MOV              R1, #-1     ;If less than 1 set
                                                             r1 to be -1 (0xfff
                                                            fffff)
   80 00000098 4770            BX               LR          ;back to main
   81 0000009A         
   82 0000009A         Question4
   83 0000009A         ;Let r0 be a, r1 be b, r2 be c, and r3 store result
   84 0000009A F04F 0004       MOV              R0, #4      ;set r0 to be whate
                                                            ver number
   85 0000009E F04F 0103       MOV              R1, #3      ;set r1 to be whate
                                                            ver number
   86 000000A2 F04F 0201       MOV              R2, #1      ;set r2 to be whate
                                                            ver number
   87 000000A6 4288            CMP              R0, R1      ; Compare a and b
   88 000000A8 DB01            BLT              aLessThanB  ;Branch if a is les
                                                            s than b
   89 000000AA DC05            BGT              aGreaterThanSomething
   90 000000AC 4770            BX               LR
   91 000000AE         aLessThanB
   92 000000AE 4290            CMP              R0, R2      ;Compare a an c
   93 000000B0 DB00            BLT              aIsTheMin   ;A is the min so ju
                                                            mp to aIsTheMin
   94 000000B2 DC01            BGT              aGreaterThanSomething
   95 000000B4         aIsTheMin
   96 000000B4 4603            MOV              R3, R0
   97 000000B6 4770            BX               LR
   98 000000B8         aGreaterThanSomething
   99 000000B8 4281            CMP              R1, R0      ;Compare b and a
  100 000000BA DB01            BLT              bLessThanA
  101 000000BC DC06            BGT              bGreaterThanSomething
  102 000000BE 4770            BX               LR
  103 000000C0         bLessThanA
  104 000000C0 4291            CMP              R1, R2      ;compare b with c
  105 000000C2 DB01            BLT              bIsTheMin
  106 000000C4 DC02            BGT              bGreaterThanSomething
  107 000000C6 4770            BX               LR
  108 000000C8         bIsTheMin
  109 000000C8 460B            MOV              R3, R1
  110 000000CA 4770            BX               LR
  111 000000CC         bGreaterThanSomething
  112 000000CC 4282            CMP              R2, R0      ;Compare c and a
  113 000000CE DB00            BLT              cLessThanA  ;Branch if c is les
                                                            s than a
  114 000000D0 4770            BX               LR
  115 000000D2         cLessThanA



ARM Macro Assembler    Page 4 


  116 000000D2 428A            CMP              R2, R1      ;Compare c and b
  117 000000D4 DB00            BLT              cIsTheMin
  118 000000D6 4770            BX               LR
  119 000000D8         cIsTheMin
  120 000000D8 4613            MOV              R3, R2
  121 000000DA 4770            BX               LR
  122 000000DC         
  123 000000DC         Question5
  124 000000DC         ;Assume r0 is output, r1 and r2 are x and y respectivly
  125 000000DC F04F 0103       MOV              R1, #3      ;Put value x into R
                                                            1
  126 000000E0 F04F 0204       MOV              R2, #4      ;Put value y into r
                                                            2
  127 000000E4 2901            CMP              R1, #1      ;Check if value is 
                                                            one
  128 000000E6 D014            BEQ              valueIsOne
  129 000000E8 2A00            CMP              R2, #0      ;Check for negative
                                                             exponent
  130 000000EA DB15            BLT              negativeExponent
  131 000000EC 460B            MOV              R3, R1      ;Make copy of value
                                                             that is being mult
                                                            iplied by itself
  132 000000EE B12A            CBZ              R2, exponentIsZero ;Branch if e
                                                            xponent is 0
  133 000000F0 2A01            CMP              R2, #1      ;Compare exponent t
                                                            o 1
  134 000000F2 D006            BEQ              exponentIsOne ;Branch if expone
                                                            nt is one
  135 000000F4 F1A2 0201       SUB              R2, R2, #1  ;Minus 1 from expon
                                                            ent before looping 
                                                            and multiplying
  136 000000F8 E005            B                powerLoop   ;PowerLoop for mult
                                                            iplying power
  137 000000FA 4770            BX               LR
  138 000000FC         exponentIsZero
  139 000000FC F04F 0001       MOV              R0, #1      ;If exponent is 0, 
                                                            1 is output so move
                                                             1 to output
  140 00000100 4770            BX               LR          ;back to main
  141 00000102         exponentIsOne
  142 00000102 4608            MOV              R0, R1      ;If exponent is 1, 
                                                            R1 (x) is output so
                                                             move x to output
  143 00000104 4770            BX               LR          ; Back to main
  144 00000106         powerLoop
  145 00000106 FB01 F103       MUL              R1, R1, R3  ;Multiply R1 by ori
                                                            ginal self and stor
                                                            e back into r1
  146 0000010A 1E52            SUBS             R2, R2, #1  ;sub exponent by 1 
                                                            and compare to 1
  147 0000010C D1FB            BNE              powerLoop   ;If exponent does n
                                                            ot equal 1 then loo
                                                            p again
  148 0000010E 4608            MOV              R0, R1      ; Move R1 which sho
                                                            uld be correct valu
                                                            e into output R0
  149 00000110 4770            BX               LR          ;Return to main
  150 00000112         valueIsOne
  151 00000112 F04F 0001       MOV              R0, #1      ;If value is one it



ARM Macro Assembler    Page 5 


                                                             will always be 1 n
                                                            o matter the expone
                                                            nt
  152 00000116 4770            BX               LR
  153 00000118         negativeExponent
  154 00000118 F04F 0000       MOV              R0, #0      ;Move 0 into output
                                                             because any intege
                                                            r to a negative exp
                                                            onent results in a 
                                                            fraction which woul
                                                            d be 0 as an unsign
                                                            ed int.
  155 0000011C 4770            BX               LR
  156 0000011E         
  157 0000011E         
  158 0000011E 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  159 00000120                 END                          ; end of file
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IM:\Keil\ARM\RV31\INC -IM:\Keil\ARM\CMSIS\Include -IM:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARRAY 00000000

Symbol: ARRAY
   Definitions
      At line 14 in file main.s
   Uses
      At line 54 in file main.s
Comment: ARRAY used once
myData 00000000

Symbol: myData
   Definitions
      At line 13 in file main.s
   Uses
      None
Comment: myData unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 15 in file main.s
   Uses
      None
Comment: .text unused
Question1 00000018

Symbol: Question1
   Definitions
      At line 32 in file main.s
   Uses
      At line 21 in file main.s
Comment: Question1 used once
Question2 0000005E

Symbol: Question2
   Definitions
      At line 52 in file main.s
   Uses
      At line 22 in file main.s
Comment: Question2 used once
Question3 0000007E

Symbol: Question3
   Definitions
      At line 67 in file main.s
   Uses
      At line 23 in file main.s
Comment: Question3 used once
Question4 0000009A

Symbol: Question4
   Definitions
      At line 82 in file main.s
   Uses
      At line 24 in file main.s
Comment: Question4 used once
Question5 000000DC

Symbol: Question5
   Definitions
      At line 123 in file main.s
   Uses
      At line 25 in file main.s
Comment: Question5 used once
Start 00000000

Symbol: Start
   Definitions
      At line 18 in file main.s
   Uses
      At line 17 in file main.s
Comment: Start used once
aGreaterThanSomething 000000B8

Symbol: aGreaterThanSomething



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 98 in file main.s
   Uses
      At line 89 in file main.s
      At line 94 in file main.s

aIsTheMin 000000B4

Symbol: aIsTheMin
   Definitions
      At line 95 in file main.s
   Uses
      At line 93 in file main.s
Comment: aIsTheMin used once
aLessThanB 000000AE

Symbol: aLessThanB
   Definitions
      At line 91 in file main.s
   Uses
      At line 88 in file main.s
Comment: aLessThanB used once
bGreaterThanSomething 000000CC

Symbol: bGreaterThanSomething
   Definitions
      At line 111 in file main.s
   Uses
      At line 101 in file main.s
      At line 106 in file main.s

bIsTheMin 000000C8

Symbol: bIsTheMin
   Definitions
      At line 108 in file main.s
   Uses
      At line 105 in file main.s
Comment: bIsTheMin used once
bLessThanA 000000C0

Symbol: bLessThanA
   Definitions
      At line 103 in file main.s
   Uses
      At line 100 in file main.s
Comment: bLessThanA used once
cIsTheMin 000000D8

Symbol: cIsTheMin
   Definitions
      At line 119 in file main.s
   Uses
      At line 117 in file main.s
Comment: cIsTheMin used once
cLessThanA 000000D2

Symbol: cLessThanA
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 115 in file main.s
   Uses
      At line 113 in file main.s
Comment: cLessThanA used once
exponentIsOne 00000102

Symbol: exponentIsOne
   Definitions
      At line 141 in file main.s
   Uses
      At line 134 in file main.s
Comment: exponentIsOne used once
exponentIsZero 000000FC

Symbol: exponentIsZero
   Definitions
      At line 138 in file main.s
   Uses
      At line 132 in file main.s
Comment: exponentIsZero used once
loop 00000016

Symbol: loop
   Definitions
      At line 27 in file main.s
   Uses
      At line 26 in file main.s
      At line 29 in file main.s

main 00000000

Symbol: main
   Definitions
      At line 20 in file main.s
   Uses
      None
Comment: main unused
negativeExponent 00000118

Symbol: negativeExponent
   Definitions
      At line 153 in file main.s
   Uses
      At line 130 in file main.s
Comment: negativeExponent used once
negativeOne 00000094

Symbol: negativeOne
   Definitions
      At line 78 in file main.s
   Uses
      At line 72 in file main.s
Comment: negativeOne used once
powerLoop 00000106

Symbol: powerLoop
   Definitions
      At line 144 in file main.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 136 in file main.s
      At line 147 in file main.s

sumOfNumbersLoop 00000068

Symbol: sumOfNumbersLoop
   Definitions
      At line 57 in file main.s
   Uses
      At line 62 in file main.s
Comment: sumOfNumbersLoop used once
valueIsOne 00000112

Symbol: valueIsOne
   Definitions
      At line 150 in file main.s
   Uses
      At line 128 in file main.s
Comment: valueIsOne used once
zero 0000008E

Symbol: zero
   Definitions
      At line 75 in file main.s
   Uses
      At line 70 in file main.s
Comment: zero used once
25 symbols
360 symbols in table
