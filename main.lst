


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ************
    2 00000000         ; main.s
    3 00000000         ; Author:
    4 00000000         ; Date Created:
    5 00000000         ; Last Modified:
    6 00000000         ; Section Number:
    7 00000000         ; Instructor: 
    8 00000000         ; Homework Number: 5
    9 00000000         ;   Brief description of the program
   10 00000000         ;
   11 00000000         ;*******************************************************
                       ************
   12 00000000         
   13 00000000         
   14 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   15 00000000                 THUMB
   16 00000000                 EXPORT           Start
   17 00000000         Start
   18 00000000         
   19 00000000         main
   20 00000000 F000 F80A       BL               Question1
   21 00000004 F000 F82B       BL               Question2
   22 00000008 F000 F84E       BL               Question3
   23 0000000C F000 F85A       BL               Question4
   24 00000010 F000 F879       BL               Question5
   25 00000014 E7FF            B                loop
   26 00000016         loop
   27 00000016         
   28 00000016 E7FE            B                loop
   29 00000018         
   30 00000018         
   31 00000018         Question1
   32 00000018 F244 5167       MOV              R1, #0x4567
   33 0000001C F2C0 1123       MOVT             R1, #0x0123
   34 00000020 F04F 08FF       MOV              R8, #0x00FF
   35 00000024 F6CF 78FF       MOVT             R8, #0xFFFF ;Setting up r8 to h
                                                            ave bit-clear value
                                                             of 0x0000FF00
   36 00000028 F64F 79FF       MOV              R9, #0xFFFF
   37 0000002C F6CF 7900       MOVT             R9, #0xFF00 ;Setting up r9 to h
                                                            ave bit-clear value
                                                             of 0x00FF0000
   38 00000030 F04F 0200       MOV              R2, #0x0000
   39 00000034 F2C0 0200       MOVT             R2, #0x0000 ;r2 should be 0x000
                                                            00000
   40 00000038 EA4F 6201       LSL              R2, R1, #24 ; Isolate last byte
                                                             to put at beginnin
                                                            g of r2, r2 is 0x67
                                                            000000
   41 0000003C EA4F 6311       LSR              r3, R1, #24 ; Isolate first byt
                                                            e to put at end of 
                                                            r2
   42 00000040 EA43 0202       ORR              R2, R3, R2  ; r2 now has first 
                                                            and last byte corre
                                                            ct, r2 is now 0x670
                                                            00001
   43 00000044 EA21 0408       BIC              R4, R1, R8  ; Clear bits to iso



ARM Macro Assembler    Page 2 


                                                            late second set of 
                                                            middle bits, r4 is 
                                                            0x00004500
   44 00000048 EA4F 2504       LSL              R5, R4, #8  ; r5 is now 0x00450
                                                            000
   45 0000004C EA42 0205       ORR              R2, R2, R5  ; r2 is now 0x67450
                                                            001
   46 00000050 EA21 0609       BIC              R6, R1, R9  ; Clear bits to iso
                                                            late first set of m
                                                            iddle bits, r6 is 0
                                                            x00230000
   47 00000054 EA4F 2716       LSR              R7, R6, #8  ; r6 is now 0x00002
                                                            300
   48 00000058 EA47 0202       ORR              R2, R7, R2  ; r2 is now finally
                                                             correct being 0x67
                                                            452301
   49 0000005C 4770            BX               LR
   50 0000005E         
   51 0000005E         Question2
   52 0000005E         
   53 0000005E 00 00 00000006 
              00000007 
              00000008 
              00000002 
              00000001 
              00000008 
              00000003 
              0000000C 
              0000000B 
              0000000A Nums    DCD              6,7,8,2,1,8,3,12,11,10 ; Make A
                                                            rray of numbers
   54 00000088 482D            LDR              R0, =Nums   ;Load R0 with nums
   55 0000008A F04F 0100       MOV              R1, #0      ;Reset R1 to 0 for 
                                                            calculation
   56 0000008E F04F 0300       MOV              R3, #0      ;Reset R3 to 0 for 
                                                            calculation
   57 00000092         sumOfNumbersLoop
   58 00000092 5842            LDR              R2, [R0, R1] ;Get numbers at it
                                                            erator point
   59 00000094 4413            ADD              R3, R3, R2  ; Add numbers and s
                                                            tore in R3
   60 00000096 F101 0104       ADD              R1, R1, #4  ; Add offset of 4
   61 0000009A 2928            CMP              R1, #40     ; is offset greater
                                                             than40
   62 0000009C D3F9            BLO              sumOfNumbersLoop ;Branch back t
                                                            o Loop
   63 0000009E F04F 010A       MOV              R1, #10     ;Move 10 into r1 to
                                                             divide by
   64 000000A2 FBB3 F0F1       UDIV             R0, R3, R1  ;Get average and st
                                                            ore into R0, rounds
                                                             down
   65 000000A6 4770            BX               LR
   66 000000A8         
   67 000000A8         Question3
   68 000000A8         ;Assume x is stored in r0 and result is stored in r1
   69 000000A8 F06F 004E       MOV              R0, #-79    ;this is setting wh
                                                            atever you want x t
                                                            o be
   70 000000AC B120            CBZ              R0, zero    ;Branch if 0



ARM Macro Assembler    Page 3 


   71 000000AE 2800            CMP              R0, #0      ;Compare with 0
   72 000000B0 DB05            BLT              negativeOne ;Branch less than 0
                                                            
   73 000000B2 F04F 0101       MOV              R1, #1      ; If not 0 and not 
                                                            less than 0, set r1
                                                             (output) to 1
   74 000000B6 4770            BX               LR          ;Back to main
   75 000000B8         zero
   76 000000B8 F04F 0100       MOV              R1, #0      ;If zero set r1 to 
                                                            0
   77 000000BC 4770            BX               LR          ;back to main
   78 000000BE         negativeOne
   79 000000BE F04F 31FF       MOV              R1, #-1     ;If less than 1 set
                                                             r1 to be -1 (0xfff
                                                            fffff)
   80 000000C2 4770            BX               LR          ;back to main
   81 000000C4         
   82 000000C4         Question4
   83 000000C4         ;Let r0 be a, r1 be b, r2 be c, and r3 store result
   84 000000C4 F04F 0004       MOV              R0, #4      ;set r0 to be whate
                                                            ver number
   85 000000C8 F04F 0103       MOV              R1, #3      ;set r1 to be whate
                                                            ver number
   86 000000CC F04F 0201       MOV              R2, #1      ;set r2 to be whate
                                                            ver number
   87 000000D0 4288            CMP              R0, R1      ; Compare a and b
   88 000000D2 DB01            BLT              aLessThanB  ;Branch if a is les
                                                            s than b
   89 000000D4 DC05            BGT              aGreaterThanSomething
   90 000000D6 4770            BX               LR
   91 000000D8         aLessThanB
   92 000000D8 4290            CMP              R0, R2      ;Compare a an c
   93 000000DA DB00            BLT              aIsTheMin   ;A is the min so ju
                                                            mp to aIsTheMin
   94 000000DC DC01            BGT              aGreaterThanSomething
   95 000000DE         aIsTheMin
   96 000000DE 4603            MOV              R3, R0
   97 000000E0 4770            BX               LR
   98 000000E2         aGreaterThanSomething
   99 000000E2 4281            CMP              R1, R0      ;Compare b and a
  100 000000E4 DB01            BLT              bLessThanA
  101 000000E6 DC06            BGT              bGreaterThanSomething
  102 000000E8 4770            BX               LR
  103 000000EA         bLessThanA
  104 000000EA 4291            CMP              R1, R2      ;compare b with c
  105 000000EC DB01            BLT              bIsTheMin
  106 000000EE DC02            BGT              bGreaterThanSomething
  107 000000F0 4770            BX               LR
  108 000000F2         bIsTheMin
  109 000000F2 460B            MOV              R3, R1
  110 000000F4 4770            BX               LR
  111 000000F6         bGreaterThanSomething
  112 000000F6 4282            CMP              R2, R0      ;Compare c and a
  113 000000F8 DB00            BLT              cLessThanA  ;Branch if c is les
                                                            s than a
  114 000000FA 4770            BX               LR
  115 000000FC         cLessThanA
  116 000000FC 428A            CMP              R2, R1      ;Compare c and b
  117 000000FE DB00            BLT              cIsTheMin



ARM Macro Assembler    Page 4 


  118 00000100 4770            BX               LR
  119 00000102         cIsTheMin
  120 00000102 4613            MOV              R3, R2
  121 00000104 4770            BX               LR
  122 00000106         
  123 00000106         Question5
  124 00000106         ;Assume r0 is output, r1 and r2 are x and y respectivly
  125 00000106 F04F 0103       MOV              R1, #3      ;Put value x into R
                                                            1
  126 0000010A F04F 0204       MOV              R2, #4      ;Put value y into r
                                                            2
  127 0000010E 2A00            CMP              R2, #0      ;Check for negative
                                                             exponent
  128 00000110 DB12            BLT              negativeExponent
  129 00000112 460B            MOV              R3, R1      ;Make copy of value
                                                             that is being mult
                                                            iplied by itself
  130 00000114 B12A            CBZ              R2, exponentIsZero ;Branch if e
                                                            xponent is 0
  131 00000116 2A01            CMP              R2, #1      ;Compare exponent t
                                                            o 1
  132 00000118 D006            BEQ              exponentIsOne ;Branch if expone
                                                            nt is one
  133 0000011A F1A2 0201       SUB              R2, R2, #1  ;Minus 1 from expon
                                                            ent before looping 
                                                            and multiplying
  134 0000011E E005            B                powerLoop   ;PowerLoop for mult
                                                            iplying power
  135 00000120 4770            BX               LR
  136 00000122         exponentIsZero
  137 00000122 F04F 0001       MOV              R0, #1      ;If exponent is 0, 
                                                            1 is output so move
                                                             1 to output
  138 00000126 4770            BX               LR          ;back to main
  139 00000128         exponentIsOne
  140 00000128 4608            MOV              R0, R1      ;If exponent is 1, 
                                                            R1 (x) is output so
                                                             move x to output
  141 0000012A 4770            BX               LR          ; Back to main
  142 0000012C         powerLoop
  143 0000012C FB01 F103       MUL              R1, R1, R3  ;Multiply R1 by ori
                                                            ginal self and stor
                                                            e back into r1
  144 00000130 1E52            SUBS             R2, R2, #1  ;sub exponent by 1 
                                                            and compare to 1
  145 00000132 D1FB            BNE              powerLoop   ;If exponent does n
                                                            ot equal 1 then loo
                                                            p again
  146 00000134 4608            MOV              R0, R1      ; Move R1 which sho
                                                            uld be correct valu
                                                            e into output R0
  147 00000136 4770            BX               LR          ;Return to main
  148 00000138         
  149 00000138         negativeExponent
  150 00000138 F04F 0000       MOV              R0, #0      ;Move 0 into output
                                                             because any intege
                                                            r to a negative exp
                                                            onent results in a 
                                                            fraction which woul



ARM Macro Assembler    Page 5 


                                                            d be 0 as an unsign
                                                            ed int.
  151 0000013C 4770            BX               LR
  152 0000013E         
  153 0000013E 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  154 00000140                 END                          ; end of file
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IM:\Keil\ARM\RV31\INC -IM:\Keil\ARM\CMSIS\Include -IM:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 14 in file main.s
   Uses
      None
Comment: .text unused
Nums 00000060

Symbol: Nums
   Definitions
      At line 53 in file main.s
   Uses
      At line 54 in file main.s
Comment: Nums used once
Question1 00000018

Symbol: Question1
   Definitions
      At line 31 in file main.s
   Uses
      At line 20 in file main.s
Comment: Question1 used once
Question2 0000005E

Symbol: Question2
   Definitions
      At line 51 in file main.s
   Uses
      At line 21 in file main.s
Comment: Question2 used once
Question3 000000A8

Symbol: Question3
   Definitions
      At line 67 in file main.s
   Uses
      At line 22 in file main.s
Comment: Question3 used once
Question4 000000C4

Symbol: Question4
   Definitions
      At line 82 in file main.s
   Uses
      At line 23 in file main.s
Comment: Question4 used once
Question5 00000106

Symbol: Question5
   Definitions
      At line 123 in file main.s
   Uses
      At line 24 in file main.s
Comment: Question5 used once
Start 00000000

Symbol: Start



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 17 in file main.s
   Uses
      At line 16 in file main.s
Comment: Start used once
aGreaterThanSomething 000000E2

Symbol: aGreaterThanSomething
   Definitions
      At line 98 in file main.s
   Uses
      At line 89 in file main.s
      At line 94 in file main.s

aIsTheMin 000000DE

Symbol: aIsTheMin
   Definitions
      At line 95 in file main.s
   Uses
      At line 93 in file main.s
Comment: aIsTheMin used once
aLessThanB 000000D8

Symbol: aLessThanB
   Definitions
      At line 91 in file main.s
   Uses
      At line 88 in file main.s
Comment: aLessThanB used once
bGreaterThanSomething 000000F6

Symbol: bGreaterThanSomething
   Definitions
      At line 111 in file main.s
   Uses
      At line 101 in file main.s
      At line 106 in file main.s

bIsTheMin 000000F2

Symbol: bIsTheMin
   Definitions
      At line 108 in file main.s
   Uses
      At line 105 in file main.s
Comment: bIsTheMin used once
bLessThanA 000000EA

Symbol: bLessThanA
   Definitions
      At line 103 in file main.s
   Uses
      At line 100 in file main.s
Comment: bLessThanA used once
cIsTheMin 00000102

Symbol: cIsTheMin
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 119 in file main.s
   Uses
      At line 117 in file main.s
Comment: cIsTheMin used once
cLessThanA 000000FC

Symbol: cLessThanA
   Definitions
      At line 115 in file main.s
   Uses
      At line 113 in file main.s
Comment: cLessThanA used once
exponentIsOne 00000128

Symbol: exponentIsOne
   Definitions
      At line 139 in file main.s
   Uses
      At line 132 in file main.s
Comment: exponentIsOne used once
exponentIsZero 00000122

Symbol: exponentIsZero
   Definitions
      At line 136 in file main.s
   Uses
      At line 130 in file main.s
Comment: exponentIsZero used once
loop 00000016

Symbol: loop
   Definitions
      At line 26 in file main.s
   Uses
      At line 25 in file main.s
      At line 28 in file main.s

main 00000000

Symbol: main
   Definitions
      At line 19 in file main.s
   Uses
      None
Comment: main unused
negativeExponent 00000138

Symbol: negativeExponent
   Definitions
      At line 149 in file main.s
   Uses
      At line 128 in file main.s
Comment: negativeExponent used once
negativeOne 000000BE

Symbol: negativeOne
   Definitions
      At line 78 in file main.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 72 in file main.s
Comment: negativeOne used once
powerLoop 0000012C

Symbol: powerLoop
   Definitions
      At line 142 in file main.s
   Uses
      At line 134 in file main.s
      At line 145 in file main.s

sumOfNumbersLoop 00000092

Symbol: sumOfNumbersLoop
   Definitions
      At line 57 in file main.s
   Uses
      At line 62 in file main.s
Comment: sumOfNumbersLoop used once
zero 000000B8

Symbol: zero
   Definitions
      At line 75 in file main.s
   Uses
      At line 70 in file main.s
Comment: zero used once
25 symbols
358 symbols in table
